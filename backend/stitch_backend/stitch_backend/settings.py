"""
Django settings for stitch_backend project.

Generated by "django-admin startproject" using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / "subdir".
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG") # Consider setting this to False in production

# ALLOWED_HOSTS for production. For development, "*" is okay.
ALLOWED_HOSTS = ["*"] # Adjust this in production to your actual domain(s)

# REST Framework settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # JWTAuthentication is used for Bearer token in Authorization header
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        # SessionAuthentication is generally kept for Django's browsable API or if you use Django sessions
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
    ),
    # Add pagination if you have it defined globally (e.g., in views.py CustomPagination)
    # "DEFAULT_PAGINATION_CLASS": "api.views.CustomPagination", # Uncomment and adjust path if you have a global pagination class
    # "PAGE_SIZE": 10, # Example page size if global pagination is used
}

# Simple JWT settings (standard configuration for tokens in response body)
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60), # Standard lifetime, adjust as needed
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),   # Standard lifetime, adjust as needed
    "ROTATE_REFRESH_TOKENS": False,                 # No rotation for localStorage approach
    "BLACKLIST_AFTER_ROTATION": False,              # No blacklisting unless rotation is true
    "UPDATE_LAST_LOGIN": False,                     # Typically false for simpler stateless JWT

    # --- REMOVED: Cookie-related settings for JWT ---
    # "AUTH_COOKIE": "jwt_access_token",
    # "AUTH_COOKIE_REFRESH": "jwt_refresh_token",
    # "AUTH_COOKIE_DOMAIN": None,
    # "AUTH_COOKIE_SECURE": False,
    # "AUTH_COOKIE_HTTP_ONLY": True,
    # "AUTH_COOKIE_SAMESITE": "Lax",
    # "AUTH_COOKIE_PATH": "/",
}

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "api", # Assuming your Django app with models, views, etc., is named 'api'
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist", # Keep this if you want to explicitly blacklist tokens on logout (good practice)
    "corsheaders", # For handling Cross-Origin Resource Sharing
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware", # Placed early to allow CORS headers
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware", # Keep for browsable API or if SessionAuth is heavily used
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "stitch_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "stitch_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv("DATABASE_NAME"),
        "USER": os.getenv("DATABASE_USER"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD"),
        "HOST": os.getenv("DATABASE_HOST"),
        "PORT": os.getenv("PORT")
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/topics/i18n/

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS Headers settings (Crucial for frontend/backend communication)
CORS_ALLOW_ALL_ORIGINS = True  # Good for development. Set to False in production and specify CORS_ALLOWED_ORIGINS
CORS_ALLOW_CREDENTIALS = False # <-- IMPORTANT: Set to False as cookies are not primary auth mechanism
                               #    Keep True ONLY if you need SessionAuthentication for browsable API alongside JWT
                               #    For pure JWT from localStorage, it's safer to keep this False if not needed.

# If CORS_ALLOW_ALL_ORIGINS is False, define specific origins:
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000", # Example for your React frontend development server
#     "https://yourfrontenddomain.com", # Your production frontend domain
# ]

# CSRF settings (mostly relevant for SessionAuthentication or forms)
CSRF_COOKIE_NAME = "csrftoken"
CSRF_HEADER_NAME = "HTTP_X_CSRFTOKEN"
CSRF_COOKIE_SAMESITE = 'Lax'    # Default
CSRF_COOKIE_SECURE = False      # False for HTTP development, True for HTTPS production
CSRF_USE_SESSIONS = False
